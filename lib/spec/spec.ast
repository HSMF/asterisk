TARGET = ocaml
PRELUDE = {
    open Lex
    open Ast
}

# denotes that the token `Literal` carries data of type string
token_Ident = string
token_Literal = string

Entry: { spec }
  | TargetSpec PreludeSpec Configs Rules {{
        spec_target = v0
      ; spec_prelude = v1
      ; spec_tokens = []
      ; spec_configs = v2
      ; spec_rules = v3
      }}
  | TargetSpec PreludeSpec Rules {{
        spec_target = v0
      ; spec_prelude = v1
      ; spec_tokens = []
      ; spec_configs = []
      ; spec_rules = v2
      }}

TargetSpec: { string }
  | Target Equals Ident { v2 }

PreludeSpec : { string }
  | Prelude Equals Literal { v2 }

Configs: { (string * string) list }
  | Configs  Config { v1 :: v0 }
  | Config { [v0] }

Config: { string * string }
  | Ident Equals Ident { v0, v2 }
  | Ident Equals Literal { v0, v2 }

Rules: { rule list }
  | Rule Rules { v0 :: v1 }
  | { [] }

Rule: { rule }
  | Ident Colon Literal CaseList { (v0, v2, v3) }

CaseList: { (string list * string) list }
  | Case CaseList { v0 :: v1 }
  | { [] }

Case: { string list * string }
  | Pipe Idents Literal { v1, v2 }

Idents: { string list }
  | Ident Idents { v0 :: v1 }
  | { [] }
